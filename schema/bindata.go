// Code generated by "esc -o bindata.go -pkg schema -ignore .*\.go -private -modtime=1518458244 data"; DO NOT EDIT.

package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/data/compose-spec.json": {
		name:    "compose-spec.json",
		local:   "data/compose-spec.json",
		size:    24935,
		modtime: 1518458244,
		compressed: `
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
AAD//6R8c/NnYQAA
`,
	},

	"/data": {
		name:  "data",
		local: `data`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"data": {
		_escData["/data/compose-spec.json"],
	},
}
