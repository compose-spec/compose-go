// Code generated by "esc -o /schema.go -pkg spec /schema/"; DO NOT EDIT.

package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/schema/config_schema_v3.9.json": {
		name:    "config_schema_v3.9.json",
		local:   "/schema/config_schema_v3.9.json",
		size:    18804,
		modtime: 1576853104,
		compressed: `
H4sIAAAAAAAC/+wc247jtvXdX0GoecvYs72gwO5b0KcCDVogaYF24BVo6dhmhiIZkvKOs/C/FxQlWaIo
kbbl2Wl3AwQ7tg7Jc+e5yZ8XCCXfqWwPBU4+oGSvtfjw+PiL4mxpv11xuXvMJd7qxz+8+/375bv3jzX4
g1lLcrMs42xLdql9kB7+uHq/MltYEH0UYID45hfItP0uB5VJIjThzDz6eQ/oL7wQXAHaEgqIKITRv3/4
8W/2Yw5bwgjbIYyKkmqyzDjTmDCQCm2wghxhISjJsNlwZY+Q8GtJJBj8npIDSGXOWj8szDMhuQCpCajk
AzI8QKgFab7oYK60JGxXbVt972D/L7sS8S3SHUKUgIxsa6RQqSBfoZ85pwoxrhEpBIUCmDZkNbiiGgn0
4z9/+hlJMAyr9rQMLqXdy/BklVTYnCqCEEoUyAPJOgS1wvnd45ncxxbswSWyIx4fkT/ZhbUoKjRqISgH
O73HuhKgEQnkSHMEONujVmZIaSw15GjLpYWusVqdTxdYa5DsH0NBVY8/PuHlbz8s//Nu+X6VLtfff9d7
bHRawtYSf0a4pT5pIU/1X6f2YJznFTCmvbO3mCroc5yB/sTlc4jjLViQ4/ehuT7fQ3OfnAOnZRHUnwbq
CxFjj59HfgoyCTpsMBbqCxFsj5+HYGumIYIbqC9EsD3+NoIXDdF+HJOPL0vz76nac3I/u0sHv4qInsf1
sdPnc8b52TJ0hJM5CMqPFeZ+nlkAc5kkLZsQSjYlobnLdc7g72aLp86XCH1277rOPtXz3qdxpWifj9DS
PjeXAbzoiqjpoy0LePYM0tx7sSuwtJo+wjJKlE65THOSae96ijdAb9ohw9ke0q3kRXCXbWopUd6NGg8e
SbnGcgfRnFX7IlXktx5fnxLCNOxAJg/t2vXJWTvYLGyYrk2b/9YLz4ZJhkWK87xHBJYSHw1GREOh/PSh
pGTk1xL+WoNoWYK7by65mH/jneSlSAWWxgqneZ9kvCgwm8s0L6EjgvODS6Jn7/UZ3UftaT20RqhBEVrp
cRcBdxN2OEbTeSmzWP9xqR0hlJQkjwfeXQJc8LyPNyuLDcjkNAAeGGnv83rhe+JI38boKcMFBPVYQm4y
GExTk+yM6YxHaFPiqlUwgj1J5IWQSNgRpeXRC7sY8Wlx/qzLjxwEsFylNou83OMnObQ53KzeKWdTN5nd
xtxlBrfEWZgqwDLbX7meF5iwGF0CpuVRcGK955tzi8AOaattF7MB2IFIzormboiLKDrrXwRXcLtPbu/3
pqLRupK1a1lcFtgg25w9aiVDzesysEuDicQxTSlhz/OrOLxoidM9V/qaoC3ZA6Z6n+0he55Y3oXqreZK
xyg5KfAuDMRI/9bZcE4Bsz6QyIL7KE5xXb6ZBLw61E1mFWVnW77bGdAx/R2kTpFJRy7JAWRsZMzFOePz
hQehkCSYIvdAP65shjxho9VflA5Dcd/N737jXomxl9tZKgXOTEwuQamQRtUZSzoIXM6wA2AV6/evSqQu
T2CjRBescgTD4bGQN17L4sLfRuyUYAXqtoy044UOf4rUCd/aP0+uHVk6umd8/hnYqhtnU+pFZB2OvO+Z
Hot+9tD3FZWH6BqY4FK/SkJ39lPn8MEePszxBs2VmEX3SQwnvFRcWthUS/wLRLmhRO0hv2SN5JpnnMYZ
hrf+FW8ME0niVZGekORAKOwcin1hjAScp5zRYwRk1TUK3TwKslISfUy50LPHmP5a2Vnr21JZHyGny/Ct
nvL11FPUUWX6utha6ZywlAtgQdtQmot0J3EGqQBJuJcVPQeb183a4TaK7BimITPThdheWVLQOmzsJSUF
GTcab0EpGK/ZWM0fok2EZ1EueyJDmE4QIjKDPZYXXB2VYW5H7qdFZAzUH56o9nuoEVl74S8KvVw01qPR
j9+oShVM4ioYptKIq93T+P7f8NA9GVXg66v8eH1SpO+8t9ePjgj6BWNFlAaWHeMP2pBBB+bSvCsu66qg
8G68FOPPTaJttZ6JeBVSGM+4GBHNjWS0V8r9qWhiuPHk1PWcE3lsQRgpyiL5gN6NZazxnLlzaO/UgCYC
+jHf+4nLZ3Oz50RO6fJpekqkP4Fx4RiLU6qdmr3oggbnWabnQEIzGkThjdOM8tZtmQZ58AdY4QhNgpbE
6Q81sWs3xAL1NrsomhTAS31teIqlvjzAdafdOiM1TT9mSoU6kK4GPbUq1JRdgmoSE48Ay6s+WFTwIqGa
e1WhAPGGIr/klG5w9pye+7JzdHkFlphSoEQVMdFtkgPFx6s0xza0MKGlhBRnES2RWlaMaC6vP7LAL2lz
bAUSsFtrpzKHsTOBVfeMG19ay1huiVTaliG4qD/13f+Mre5S5FjDN5X4phLdCl2VG6i51MFbBJhn+lCU
sf2KpICChydHbi35DwZWlAkTxhqQb4UBHugdMJAkS3vaMHLlDGHv1EW5XbNt7MEpsSnmTGNOFo8Yz3Oj
qzN+xwTihdAqyrV+Iiznny4Ps2bgtqA4Ayc0u5XRSktMmL54VsFli5CwBQksg0mzHNaMJupG8xXkhQSc
f4GWkU/bmsDUBOwpcyNZX0XyGrW54W0Ir6OaygSGCwYpZV/uHnmPy3lcvia3zCRoaE/2TVuGdGhaf5Ln
uhoWdPHJAdMyonty1bzJWNUhYvHJ+3JWSKYN2AypXcz8V9QAUg2VcjF/ByQ8ZLQO19+JwMVcvjl6JCvx
phpvweuWGzZS4L6z153vym1mM0ek+tSWsh5aXq2jRdwYhiuXHISEDOuqg6FlCQ9jgq35eS/qq5qc2/T0
Fe+w1jjbR9X5Liy3vELZdNAm8DrEGuqbP7zAH37d1vP2NL1+Zzb4XmYFFX7N9Qb9jng/5XW0Z/KllznE
+n9n1CZXplhDOkHOK+jyIOrx6nIN9XXo8h094cyW8EZ0yBnG6ujSsCk4Jd7oifFFtwfYouGCeX5oZSx/
HkVqrIXtHFrLZpryGV3Q6vuJPGXqzY47XdIzjMH6ZeqU1hbt0Kv70wjjjqtZP/ihBEMnOw6a1p/7g0/2
Rw7WPf44IPatq47PX0eVXXw/n+COXTU/YzAyCdqvTSzM/6fFfwMAAP//g/XicXRJAAA=
`,
	},

	"/schema": {
		name:  "schema",
		local: `/schema/`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"/schema/": {
		_escData["/schema/config_schema_v3.9.json"],
	},
}
